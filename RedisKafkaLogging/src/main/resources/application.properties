# ==============================================
# 스프링 부트 애플리케이션 설정 (application.properties)
# ==============================================


#PostgreSQL 설정
#	spring.datasource.url 등에 Docker의 Postgres 컨테이너를 가정하여 localhost:5432로 설정했고, 
#	데이터베이스 이름은 rediskafka. ddl-auto=update로 하여 애플리케이션 시작 시 테이블이 없으면 생성되도록 했음
#
#Kafka 설정
#	Kafka 브로커는 localhost:9092로 지정하고, Consumer 그룹 ID를 "event-group"로 설정
#	Consumer의 offset 초기 설정을 earliest로 지정하여, 새로운 컨슈머 그룹이 시작될 때 토픽의 처음부터 메시지를 읽 또한 Kafka 메시지의 키/값을 String/JSON으로 직렬화하도록 설정
#	JsonSerializer/JsonDeserializer를 이용하면 Java 객체를 자동으로 JSON 변환하여 보내고 받을 수 있음
#	trusted.packages=* 설정은 수신한 JSON을 특정 클래스(예: Event 객체)로 변환할 때 패키지 신뢰를 처리하는 옵션 (데모 목적상 *로 전체 허용)
#
#Redis 설정
#	Redis도 Docker로 실행하므로 localhost:6379로 연결

spring.application.name=RedisKafkaLogging

# [PostgreSQL 데이터베이스 설정]
# PostgreSQL 접속 URL (DB명: rediskafka)
spring.datasource.url=jdbc:postgresql://localhost:5432/rediskafka
# DB 사용자명 (docker-compose 또는 로컬에 동일하게 설정)
spring.datasource.username=rediskafka
# DB 비밀번호
spring.datasource.password=1234
# JPA를 통한 DDL 자동 반영 (개발 편의를 위해 update 사용)
spring.jpa.hibernate.ddl-auto=update
# 하이버네이트에 PostgreSQL 방언 사용 지시
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# [Kafka 설정]
# Kafka 브로커 주소
spring.kafka.bootstrap-servers=localhost:9092
# Kafka Consumer 그룹 ID 설정
spring.kafka.consumer.group-id=event-group
# 신규 그룹의 경우 처음부터 읽도록 설정 (earliest)
spring.kafka.consumer.auto-offset-reset=earliest

# (Kafka 직렬화/역직렬화 설정)
# Producer Key Serializer
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
# Producer Value를 JSON으로 직렬화
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
# Consumer Key Deserializer
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
# Consumer Value 역직렬화 (JSON)
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
# 역직렬화 시 신뢰할 패키지 (예: * 로 모두 허용; 실제 환경에서는 특정 패키지명 지정 권장)
spring.kafka.consumer.properties.spring.json.trusted.packages=*

# [Redis 설정]
# Redis 호스트명
spring.data.redis.host=localhost
# Redis 포트 (기본 6379)
spring.data.redis.port=6379
